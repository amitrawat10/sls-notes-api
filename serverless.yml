org: fakelook
service: notesAPI
plugins:
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters

package:
  patterns:
    - "!node_modules/**"
    - "node_modules/aws-jwt-verify/**"

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-south-1
  stage: ${opt:stage, 'dev'}

functions:
  authorizer:
    handler: authorizer.authorizer
    environment:
      COGNITO_USERPOOL_ID: !Ref cognitoUserPool
      COGNITO_WEB_CLIENT_ID: !Ref cognitoUserPoolWebClient
  createNote:
    handler: handler.createNote
    environment:
      TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: POST
          path: notes
          authorizer:
            name: authorizer
            type: token
            resultTtlInSeconds: 0
  getNote:
    handler: handler.getNote
    environment:
      TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: GET
          path: notes/{id}
          authorizer:
            name: authorizer
            type: token
            resultTtlInSeconds: 0
  updateNote:
    handler: handler.updateNote
    environment:
      TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: PUT
          path: notes/{id}
          authorizer:
            name: authorizer
            type: token
            resultTtlInSeconds: 0
  deleteNote:
    handler: handler.deleteNote
    environment:
      TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:DeleteItem
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: DELETE
          path: notes/{id}
          authorizer:
            name: authorizer
            type: token
            resultTtlInSeconds: 0
  getAllNotes:
    handler: handler.getAllNotes
    environment:
      TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Scan
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: GET
          path: notes
          authorizer:
            name: user_pool_authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt cognitoUserPool.Arn
            resultTtlInSeconds: 0

resources:
  - ${file(resources.yml)}
